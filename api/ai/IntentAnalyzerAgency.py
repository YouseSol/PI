import crewai
import crewai.crew
from langchain_openai import ChatOpenAI

class IntentAnalyzerAgency:
    def __init__(self, conversation_history: str):
        self.llm = ChatOpenAI(model="gpt-4o", temperature=0)
        self.conversation_history = conversation_history

    def intent_analyzer(self) -> crewai.Agent:
        return crewai.Agent(
            name="Analisador de IntenÃ§Ã£o de ReuniÃ£o",
            role="Especialista em anÃ¡lise de intenÃ§Ã£o",
            goal="Determinar se o lead deseja ou nÃ£o marcar uma reuniÃ£o com base no histÃ³rico da conversa.",
            backstory=(
                "Um agente treinado para interpretar mensagens e identificar sinais de interesse na marcaÃ§Ã£o de reuniÃµes. "
                "Ele analisa respostas diretas, expressÃµes de dÃºvida ou hesitaÃ§Ã£o, e sugere se o prÃ³ximo passo deve ser marcar um encontro."
            ),
            llm=self.llm
        )

    def analyze_intent(self) -> crewai.Task:
        return crewai.Task(
            description=(
                "Analise o seguinte histÃ³rico de conversa e determine se a lead quer ou nÃ£o marcar uma reuniÃ£o. "
                "Responda **exclusivamente** com 'True' se a lead demonstrar interesse e 'False' caso contrÃ¡rio.\n\n"
                f"ğŸ”¹ **HistÃ³rico da conversa:**\n{self.conversation_history}\n\n"
                "ğŸ”¹ **CritÃ©rios:**\n"
                "- Responda 'True' se a lead expressar claramente interesse em agendar uma reuniÃ£o.\n"
                "- Responda 'False' se houver recusa, hesitaÃ§Ã£o ou falta de compromisso explÃ­cito.\n"
                "- NÃ£o forneÃ§a explicaÃ§Ãµes adicionais."
            ),
            expected_output="Exclusivamente 'True' ou 'False', sem explicaÃ§Ãµes adicionais.",
            agent=self.intent_analyzer()
        )
    
    def crew(self) -> crewai.Crew:
        return crewai.Crew(
            agents=[self.intent_analyzer()],
            tasks=[self.analyze_intent()]
        )
